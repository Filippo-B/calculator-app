@use '../index.scss' as *;

.calculator {
  margin: 1rem;
  transition: max-width 0.2s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  height: 500px;

  &.scientific-layout {
    height: 1000px;
  }

  @include mq($desktop-width, up) {
    &.normal-layout {
      max-width: 540px;
    }
    &.scientific-layout {
      max-width: 1000px;
    }
  }
}

.buttons-container {
  padding: 1rem;
  width: 100%;
  height: 100%;

  @include mq($very-small-layout, down) {
    padding: 0.5rem;
  }
}

.normal-layout {
  .button--scientific-layout {
    display: none;
  }
}

.scientific-layout {
  @include mq($desktop-width, down) {
    .button--normal-layout {
      display: none; // hide normal layout buttons on mobile whan layout is scientific
    }
  }
}

// buttons layout

.buttons-container {
  display: grid;
  grid-gap: 0.8rem;
  grid-template-columns: repeat(4, minmax(0, 1fr));
  .normal-layout & {
    grid-template-areas:
      'seven eight nine delete'
      'four five six plus'
      'one two three minus'
      'comma zero divide multiply'
      'reset reset equal equal';
  }

  .scientific-layout & {
    grid-template-areas:
      'secondFunction tenX openParenthesis closeParenthesis'
      'percentage factorial invertNumber inverse'
      'addToMemory subtractFromMemory cancelMemory recallMemory'
      'powerOfTwo powerOfThree powerOfY eulersNumber'
      'squareRoot cubicRoot yRoot eToX'
      'sin cos tan pi'
      'sinh cosh tanh exponentialNotation'
      'in logTen radial random';
  }
}

@include mq($desktop-width, up) {
  .buttons-container {
    .scientific-layout & {
      grid-template-columns: repeat(10, minmax(0, 1fr));
      grid-template-areas:
        'openParenthesis closeParenthesis cancelMemory addToMemory subtractFromMemory recallMemory seven eight nine delete'
        'secondFunction powerOfTwo powerOfThree powerOfY eToX tenX four five six plus'
        'inverse squareRoot cubicRoot yRoot in logTen one two three minus'
        'factorial sin cos tan eulersNumber exponentialNotation comma zero divide multiply'
        'radial sinh cosh tanh pi random percentage invertNumber reset equal';
    }
  }
}

@include mq($very-small-layout, down) {
  .buttons-container {
    grid-gap: 0.7rem 0.5rem;
    grid-template-columns: repeat(6, minmax(0, 1fr));
    .normal-layout & {
      grid-template-areas:
        'seven seven eight eight nine nine'
        'four four five five  six six'
        'one one two two three three'
        'comma comma zero zero delete delete'
        'plus plus plus minus minus minus'
        'multiply multiply multiply  divide divide divide'
        'reset reset reset equal equal equal';
    }

    .scientific-layout & {
      grid-template-areas:
        'secondFunction secondFunction percentage percentage invertNumber invertNumber'
        'addToMemory addToMemory subtractFromMemory subtractFromMemory openParenthesis openParenthesis'
        'cancelMemory cancelMemory recallMemory recallMemory closeParenthesis closeParenthesis'
        'factorial factorial eulersNumber eulersNumber eToX eToX'
        'powerOfTwo powerOfTwo powerOfThree powerOfThree powerOfY powerOfY'
        'squareRoot squareRoot cubicRoot cubicRoot yRoot yRoot'
        'sin sin cos cos tan tan'
        'sinh sinh cosh cosh tanh tanh'
        'pi pi exponentialNotation exponentialNotation radial radial'
        'in in logTen logTen inverse inverse'
        'tenX tenX tenX random random random';
    }
  }
}
// prettier-ignore
.buttons-container {
  #openParenthesis      {grid-area: openParenthesis}
  #closeParenthesis     {grid-area: closeParenthesis}
  #cancelMemory         {grid-area: cancelMemory}
  #addToMemory          {grid-area: addToMemory}
  #subtractFromMemory   {grid-area: subtractFromMemory}
  #recallMemory         {grid-area: recallMemory}
  #seven                {grid-area: seven}
  #eight                {grid-area: eight}
  #nine                 {grid-area: nine}
  #delete               {grid-area: delete}
  #secondFunction       {grid-area: secondFunction}
  #powerOfTwo           {grid-area: powerOfTwo}
  #powerOfThree         {grid-area: powerOfThree}
  #powerOfY             {grid-area: powerOfY}
  #eToX                 {grid-area: eToX}
  #tenX                 {grid-area: tenX}
  #four                 {grid-area: four}
  #five                 {grid-area: five}
  #six                  {grid-area: six}
  #plus                 {grid-area: plus}
  #inverse              {grid-area: inverse}
  #squareRoot           {grid-area: squareRoot}
  #cubicRoot            {grid-area: cubicRoot}
  #yRoot                {grid-area: yRoot}
  #in                   {grid-area: in}
  #logTen               {grid-area: logTen}
  #one                  {grid-area: one}
  #two                  {grid-area: two}
  #three                {grid-area: three}
  #minus                {grid-area: minus}
  #factorial            {grid-area: factorial}
  #sin                  {grid-area: sin}
  #cos                  {grid-area: cos}
  #tan                  {grid-area: tan}
  #eulersNumber         {grid-area: eulersNumber}
  #exponentialNotation  {grid-area: exponentialNotation}
  #comma                {grid-area: comma}
  #zero                 {grid-area: zero}
  #divide               {grid-area: divide}
  #multiply             {grid-area: multiply}
  #radial               {grid-area: radial}
  #sinh                 {grid-area: sinh}
  #cosh                 {grid-area: cosh}
  #tanh                 {grid-area: tanh}
  #pi                   {grid-area: pi}
  #random               {grid-area: random}
  #percentage           {grid-area: percentage}
  #invertNumber         {grid-area: invertNumber}
  #reset                {grid-area: reset}
  #equal                {grid-area: equal}
          

}
